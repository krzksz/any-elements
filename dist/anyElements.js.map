{"version":3,"file":"anyElements.js","sources":["../src/registry.ts","../src/anyElements.ts"],"sourcesContent":["const propertyName = \"$any\";\n\nconst registry = {};\nconst promises = {};\n\nconst rootNode = document.body;\n\nconst forEach = Array.prototype.forEach;\n\nconst callIfExists = callable => callable && callable();\n\nconst connect = (node: HTMLElement, name: string, element: any) => {\n  if (node[propertyName]) {\n    return;\n  }\n  // Prevent any other synchronous methods to enter.\n  node[propertyName] = name;\n\n  Promise.resolve(element()).then(Constructor => {\n    const instance = new Constructor(node);\n    instance.$element = node;\n    instance.$name = name;\n    node[propertyName] = instance;\n\n    const attributeFilter = callIfExists(instance.observedAttributes);\n    if (attributeFilter) {\n      instance.$observer = new MutationObserver(mutationsList => {\n        forEach.call(mutationsList, mutation => {\n          const attributeName = mutation.attributeName;\n          instance.attributeChangedCallback(\n            attributeName,\n            mutation.oldValue,\n            (mutation.target as HTMLElement).getAttribute(attributeName)\n          );\n        });\n      });\n\n      instance.$observer.observe(node, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter,\n      });\n    }\n\n    callIfExists(instance.connectedCallback);\n  });\n};\n\nconst disconnect = (node: HTMLElement) => {\n  const instance = node[propertyName];\n\n  if (!instance) {\n    return;\n  }\n\n  const observer = instance.$observer;\n  if (observer) {\n    observer.disconnect();\n  }\n\n  callIfExists(instance.disconnectedCallback);\n\n  delete instance.$element;\n  delete node[propertyName];\n};\n\nconst connectAll = (parent: HTMLElement, onlyName?: string) => {\n  // 1 is Node.ELEMENT_NODE\n  if (parent.nodeType !== 1) {\n    return;\n  }\n\n  const names = Object.keys(registry);\n\n  forEach.call(names, (name: string) => {\n    const element = registry[name];\n    const selector = element._options._selector;\n\n    if (parent.matches(selector)) {\n      connect(\n        parent,\n        name,\n        element._constructor\n      );\n    }\n\n    forEach.call(parent.querySelectorAll(selector), (node: HTMLElement) =>\n      connect(\n        node,\n        name,\n        element._constructor\n      )\n    );\n  });\n};\n\nconst disconnectAll = (parent: HTMLElement) => {\n  // 1 is Node.ELEMENT_NODE\n  if (parent.nodeType !== 1) {\n    return;\n  }\n\n  disconnect(parent);\n\n  forEach.call(parent.querySelectorAll(`*`), disconnect);\n};\n\nexport default class AnyElementRegistry {\n  public constructor() {\n    new MutationObserver(mutationsList => {\n      forEach.call(mutationsList, mutation => {\n        forEach.call(mutation.removedNodes, disconnectAll);\n        forEach.call(mutation.addedNodes, connectAll);\n      });\n    }).observe(rootNode, {\n      childList: true,\n      subtree: true,\n    });\n\n    connectAll(rootNode);\n  }\n\n  public define(\n    name: string,\n    constructor: Function | PromiseLike<Function>,\n    options: { selector?: string; lazy?: boolean } = {}\n  ): void {\n    if (typeof name !== \"string\" || !name.match(/^[a-z][^A-Z]*\\-[^A-Z]*$/)) {\n      throw new DOMException(`\"${name}\" is not a valid element name`);\n    }\n    if (this.get(name)) {\n      throw new DOMException(`'${name}' has already been declared`);\n    }\n\n    registry[name] = {\n      _constructor: !options.lazy ? () => constructor : constructor,\n      _options: {\n        _selector: options.selector || name,\n      },\n    };\n\n    connectAll(rootNode, name);\n\n    if (promises[name]) {\n      promises[name].forEach(resolve => resolve());\n    }\n  }\n\n  public undefine(name: string) {\n    delete registry[name];\n  }\n\n  public get(name: string): Function | PromiseLike<Function> {\n    return registry[name] ? registry[name]._constructor() : undefined;\n  }\n\n  public whenDefined(name: string): Promise<void> {\n    const promise = new Promise(resolve => {\n      if (this.get(name)) {\n        resolve();\n      } else {\n        if (!promises[name]) {\n          promises[name] = [];\n        }\n        promises[name].push(resolve);\n      }\n    }) as Promise<void>;\n\n    return promise;\n  }\n}\n","import AnyElementRegistry from \"./registry\";\n\nexport default new AnyElementRegistry();\n"],"names":["const","registry","promises","rootNode","document","body","forEach","Array","prototype","callIfExists","callable","connect","node","name","element","Promise","resolve","then","Constructor","instance","$element","$name","attributeFilter","observedAttributes","$observer","MutationObserver","mutationsList","call","mutation","attributeName","attributeChangedCallback","oldValue","target","getAttribute","observe","attributes","attributeOldValue","connectedCallback","disconnect","observer","disconnectedCallback","connectAll","parent","onlyName","nodeType","names","Object","keys","selector","_options","_selector","matches","_constructor","querySelectorAll","disconnectAll","AnyElementRegistry","constructor","removedNodes","addedNodes","define","options","match","DOMException","this","get","lazy","undefine","undefined","whenDefined","push"],"mappings":"AAAAA,IAEMC,EAAW,GACXC,EAAW,GAEXC,EAAWC,SAASC,KAEpBC,EAAUC,MAAMC,UAAUF,QAE1BG,WAAeC,UAAYA,GAAYA,KAEvCC,WAAWC,EAAmBC,EAAcC,GAC5CF,EAAI,OAIRA,EAAI,KAAiBC,EAErBE,QAAQC,QAAQF,KAAWG,cAAKC,OACxBC,EAAW,IAAID,EAAYN,GACjCO,EAASC,SAAWR,EACpBO,EAASE,MAAQR,EACjBD,EAAI,KAAiBO,MAEfG,EAAkBb,EAAaU,EAASI,oBAC1CD,IACFH,EAASK,UAAY,IAAIC,0BAAiBC,GACxCpB,EAAQqB,KAAKD,WAAeE,OACpBC,EAAgBD,EAASC,cAC/BV,EAASW,yBACPD,EACAD,EAASG,SACRH,EAASI,OAAuBC,aAAaJ,QAKpDV,EAASK,UAAUU,QAAQtB,EAAM,CAC/BuB,YAAY,EACZC,mBAAmB,kBACnBd,KAIJb,EAAaU,EAASkB,uBAIpBC,WAAc1B,OACZO,EAAWP,EAAI,QAEhBO,OAICoB,EAAWpB,EAASK,UACtBe,GACFA,EAASD,aAGX7B,EAAaU,EAASqB,6BAEfrB,EAASC,gBACTR,EAAI,OAGP6B,WAAcC,EAAqBC,MAEf,IAApBD,EAAOE,cAILC,EAAQC,OAAOC,KAAK9C,GAE1BK,EAAQqB,KAAKkB,WAAQhC,OACbC,EAAUb,EAASY,GACnBmC,EAAWlC,EAAQmC,EAASC,EAE9BR,EAAOS,QAAQH,IACjBrC,EACE+B,EACA7B,EACAC,EAAQsC,GAIZ9C,EAAQqB,KAAKe,EAAOW,iBAAiBL,YAAYpC,UAC/CD,EACEC,EACAC,EACAC,EAAQsC,SAMVE,WAAiBZ,GAEG,IAApBA,EAAOE,WAIXN,EAAWI,GAEXpC,EAAQqB,KAAKe,EAAOW,sBAAuBf,KAGxBiB,EACnBC,eACM/B,0BAAiBC,KACXC,KAAKD,WAAeE,KAClBD,KAAKC,EAAS6B,aAAcH,KAC5B3B,KAAKC,EAAS8B,WAAYjB,OAEnCP,QAAQ/B,EAAU,YACR,WACF,IAGXsC,EAAWtC,IAGNwD,YAAAA,gBACL9C,EACA2C,EACAI,qBAAiD,IAE7B,iBAAT/C,IAAsBA,EAAKgD,MAAM,iCACpC,IAAIC,iBAAiBjD,sCAEzBkD,KAAKC,IAAInD,SACL,IAAIiD,iBAAiBjD,iCAG7BZ,EAASY,GAAQ,GACA+C,EAAQK,KAA2BT,oBAAdA,GACpCP,EAAU,CACRC,EAAWU,EAAQZ,UAAYnC,IAInC4B,EAAWtC,GAEPD,EAASW,IACXX,EAASW,GAAMP,iBAAQU,UAAWA,OAI/BkD,YAAAA,kBAASrD,UACPZ,EAASY,IAGXmD,YAAAA,aAAInD,UACFZ,EAASY,GAAQZ,EAASY,GAAMuC,SAAiBe,GAGnDC,YAAAA,qBAAYvD,qBACD,IAAIE,iBAAQC,GACtB+C,EAAKC,IAAInD,QAGNX,EAASW,KACZX,EAASW,GAAQ,MAEVA,GAAMwD,KAAKrD,OClK5B,MAAe,IAAIuC"}